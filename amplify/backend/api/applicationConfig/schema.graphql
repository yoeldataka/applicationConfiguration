type AiClientCompany @model @auth(rules: [{ allow: public }]) {
    id: ID!
    name: String!
    business: String!
    values: String!
}

type AiLlm @model @auth(rules: [{ allow: public }]) {
    id: ID!
    name: String!
    intelligence: Int!
    speed: Int!
    inputPriceInDollars: Float!
    outputPriceInDollars: Float!
    input: [String!]!
    output: [String!]!
    description: String!
    available: Boolean!
    maxTokens: Float
}

type AiVectorialDbConfig @model @auth(rules: [{ allow: public }]) {
    id: ID!
    name: String!
    apiKey: String!
    indexName: String!
    nameSpace: String!
    score: Float!
    numberOfSimilarities: Float!
}

type AiVectorizerParameters @model @auth(rules: [{ allow: public }]) {
    id: ID!
    name: String!
    aiLlmID: ID! @index(name: "byAiLlm", sortKeyFields: ["id"])
    aiLlm: AiLlm @hasOne(fields: ["aiLlmID"])
    chunkSize: Float!
    chunkOverlap: String!
}

type AiParameters @model @auth(rules: [{ allow: public }]) {
    id: ID!
    name: String!
    role: String!
    companyID: ID! @index(name: "byCompany", sortKeyFields: ["id"])
    company: AiClientCompany @hasOne(fields: ["companyID"])
    conversationPurpose: String!
    conversationType: String!
    prePrompt: String!
    postPrompt: String!
    llmID: ID! @index(name: "byLlm", sortKeyFields: ["id"])
    llm: AiLlm @hasOne(fields: ["llmID"])
    chatMemory: Float!
    responseTemperature: Float!
    responseLanguage: String!
}

type AiTools @model @auth(rules: [{ allow: public }]) {
    id: ID!
    name: String!
    usedIn: [AiConfiguration]
        @manyToMany(relationName: "AiToolsAiConfiguration")
}

type AiConfiguration @model @auth(rules: [{ allow: public }]) {
    id: ID!
    name: String!
    aiParametersID: ID! @index(name: "byAiParameters", sortKeyFields: ["id"])
    aiParameters: AiParameters @hasOne(fields: ["aiParametersID"])
    availableTools: [AiTools]
        @manyToMany(relationName: "AiToolsAiConfiguration")
}

type AiIndexationConfiguration @model @auth(rules: [{ allow: public }]) {
    id: ID!
    name: String!
    vectorizerParametersID: ID!
        @index(name: "byVectorizerParameters", sortKeyFields: ["id"])
    vectorizerParameters: AiVectorizerParameters
        @hasOne(fields: ["vectorizerParametersID"])
    vectorialDbConfigID: ID!
        @index(name: "byVectorialDbConfig", sortKeyFields: ["id"])
    vectorialDbConfig: AiVectorialDbConfig
        @hasOne(fields: ["vectorialDbConfigID"])
}

type AiWebsocket @model @auth(rules: [{ allow: public }]) {
    id: ID!
    name: String!
    url: String!
}

type AiQueue @model @auth(rules: [{ allow: public }]) {
    id: ID!
    name: String!
    queryArn: String!
}

type AiTaskTypes @model @auth(rules: [{ allow: public }]) {
    id: ID!
    types: String!
}

type AiProcess @model @auth(rules: [{ allow: public }]) {
    id: ID!
    name: String!
    taskTypeID: ID! @index(name: "byTaskType", sortKeyFields: ["id"])
    taskType: AiTaskTypes @hasOne(fields: ["taskTypeID"])
    aiConfigID: ID! @index(name: "byAiConfig", sortKeyFields: ["id"])
    aiConfig: AiConfiguration @hasOne(fields: ["aiConfigID"])
    usedIn: [AiSettings] @manyToMany(relationName: "AiProcessAiSettings")
}

type AiSettings @model @auth(rules: [{ allow: public }]) {
    id: ID!
    name: String!
    balancerUrl: String!
    processes: [AiProcess] @manyToMany(relationName: "AiProcessAiSettings")
}

type BackendSettings @model @auth(rules: [{ allow: public }]) {
    id: ID!
}

type FrontendSettings @model @auth(rules: [{ allow: public }]) {
    id: ID!
}

type ApplicationStage @model @auth(rules: [{ allow: public }]) {
    id: ID!
    name: String! @index(name: "byStageName")
    aiSettingsID: ID! @index(name: "byAiSettings", sortKeyFields: ["id"])
    aiSettings: AiSettings @hasOne(fields: ["aiSettingsID"])
    backendSettingsID: ID!
        @index(name: "byBackendSettings", sortKeyFields: ["id"])
    backendSettings: BackendSettings @hasOne(fields: ["backendSettingsID"])
    frontendSettingsID: ID!
        @index(name: "byFrontendSettings", sortKeyFields: ["id"])
    frontendSettings: FrontendSettings @hasOne(fields: ["frontendSettingsID"])
}

type Application @model @auth(rules: [{ allow: public }]) {
    id: ID!
    name: String!
    devStageID: ID! @index(name: "byDevStage", sortKeyFields: ["id"])
    stagingStageID: ID! @index(name: "byStagingStage", sortKeyFields: ["id"])
    prodStageID: ID! @index(name: "byProdStage", sortKeyFields: ["id"])
    DEV: ApplicationStage @hasOne(fields: ["devStageID"])
    STAGING: ApplicationStage @hasOne(fields: ["stagingStageID"])
    PROD: ApplicationStage @hasOne(fields: ["prodStageID"])
}
